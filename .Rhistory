if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
View(D)
View(Homocides_flt)
Homocides_flt[r,23]
Homocides_flt[order(Day),]
Homocides_flt[order(Day),]
Homocides_flt[order(Day)=]
Homocides_flt[order(Day)]
Homocides_flt[order(Homocides_flt$Day,)]
example(order)
help(order)
Homocides_flt[order(day),]
Homocides_flt[order(Day),]
Data <- Homocides_flt[order(Day),]
Data <- Homocides_flt[order(Homocides_flt$Day),]
View(Data)
Homocides_flt <- Homocides_flt[order(Homocides_flt$Day),]
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
View(D)
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
a<- a + 1
}
}
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
D[a,1] <- a
a<- a + 1
}
}
r = 1
a = 1
if(Homocides_flt[r,23] == a)
{}
Homocides_flt[r,23] == a
D[a,2]
D[a,2] + 1
D <- data.frame(Day = rep(NA,365),
Homocide_cnt = rep(0,365))
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
D[a,1] <- a
a<- a + 1
}
}
plot(D$Day,D$Homocide_cnt)
cumsum(D$Homocide_cnt)
plot(D$Day,cumsum(D$Homocide_cnt))
D$Homocide_cnt = cumsum(D$Homocide_cnt)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
library(`agTrend-master`)
library(`agTrend`)
library(`agTrend-master`)
library(agTrend)
library(bsts)
help(bsts)
## Example 8: Non-Gaussian data
## Poisson counts of shark attacks in Florida.
data(shark)
logshark <- log1p(shark$Attacks)
ss.level <- AddLocalLevel(list(), y = logshark)
model <- bsts(shark$Attacks, ss.level, niter = 500,
ping = 250, family = "poisson", seed = 8675309)
plot(model)
plot(model,'components')
# Poisson data can have an 'exposure' as the second column of a
## two-column matrix.
model <- bsts(cbind(shark$Attacks, shark$Population / 1000),
state.specification = ss.level, niter = 500,
family = "poisson", ping = 250, seed = 8675309)
plot(model)
MakePlots <- function(model, ask = TRUE) {
## Make all the plots callable by plot.bsts.
opar <- par(ask = ask)
on.exit(par(opar))
plot.types <- c("state", "components", "residuals",
"prediction.errors", "forecast.distribution")
for (plot.type in plot.types) {
plot(model, plot.type)
}
if (model$has.regression) {
regression.plot.types <- c("coefficients", "predictors", "size")
for (plot.type in regression.plot.types) {
plot(model, plot.type)
}
}
}
MakePlots(model)
trend <- cumsum(rnorm(number.of.time.points, 0, sigma.level))
predictors <- matrix(rnorm(total.sample.size * 2), ncol = 2)
colnames(predictors) <- c("X1", "X2")
coefficients <- c(-10, 10)
regression <- as.numeric(predictors %*% coefficients)
y.hat <- rep(trend, sample.size.per.time.point) + regression
y <- rnorm(length(y.hat), y.hat, sigma.obs)
data(iclaims)
ss <- AddLocalLinearTrend(list(), initial.claims$iclaimsNSA)
ss <- AddSeasonal(ss, initial.claims$iclaimsNSA, nseasons = 52)
model <- bsts(iclaimsNSA ~ ., state.specification = ss, data =
initial.claims, niter = 1000)
plot(model)
plot(model, "components")
plot(model, "coefficients")
plot(model, "predictors")
plot(model)
library(BLR)
help(BLR)
install.packages("bayesplot")
install.packages("rstanarm")
library("bayesplot")
library("rstanarm")
library("ggplot2")
fit <- stan_glm(mpg ~ ., data = mtcars)
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("cyl", "drat", "am", "wt"),
prob = 0.8) + plot_title
color_scheme_set("red")
ppc_dens_overlay(y = fit$y,
yrep = posterior_predict(fit, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = fit$y,
yrep = posterior_predict(fit, draws = 150))
fit <- stan_glm(mpg ~ wt, data = mtcars)
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("cyl", "drat", "am", "wt"),
prob = 0.8) + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("wt"),
prob = 0.8) + plot_title
color_scheme_set("red")
ppc_dens_overlay(y = fit$y,
yrep = posterior_predict(fit, draws = 50))
#################################### Download names ####################################
website %>%
html_nodes(xpath = '//*[@class = "author"]') %>%
html_text()
#################################### Load tools####################################
rm(list = ls())
library(data.table)
library(XML)
library(rvest)
website <- read_html('https://gsa.confex.com/gsa/2018AM/webprogram/allauthors.html')
#################################### Download names ####################################
website %>%
html_nodes(xpath = '//*[@class = "author"]') %>%
html_text()
#################################### Download names ####################################
nodes <- website %>%
html_nodes(xpath = '//*[@class = "author"]') %>%
html_text()
length(nodes)
strsplit(nodes)
top(nodes)
nodes[1:10]
help(sub)
sub('\\\r\n\t\t\r\n\t\t\t','',nodes)
#################################### Deal with Data ####################################
nodes <- sub('\\\r\n\t\t\r\n\t\t\t','',nodes)
nodes
nodes <- sub('\\.\r\n\t\t\r\n\t','',nodes)
nodes
#################################### Load tools####################################
rm(list = ls())
library(data.table)
library(XML)
library(rvest)
library(stringr)
library(tidyverse)
library(gender)
library(randomNames)
install.packages("genderdata", repos = "http://packages.ropensci.org")
#################################### Extract Data ####################################
websites <- read.csv('gsa_conferences.csv')
listofdf <- list() #create list to store dataframes in
for(i in 1:2){
website <- read_html(as.character(websites$website[i]))
#replaced a lot of the script with a function
source('confExtract.R')
conferenceNames <- confExtract(website)
colnames(conferenceNames)[1] <- c('First_name')
listofdf[[i]] <- conferenceNames
rm(conferenceNames)
}
for(i in 1:length(listofdf)){
df <- listofdf[[i]]
assign(as.character(websites$year[i]),df)
}
rm(website,df,i,confExtract)
setwd('/Users/matthew/Documents/GitHub/GSA_Gender')
#################################### Extract Data ####################################
websites <- read.csv('gsa_conferences.csv')
listofdf <- list() #create list to store dataframes in
for(i in 1:2){
website <- read_html(as.character(websites$website[i]))
#replaced a lot of the script with a function
source('confExtract.R')
conferenceNames <- confExtract(website)
colnames(conferenceNames)[1] <- c('First_name')
listofdf[[i]] <- conferenceNames
rm(conferenceNames)
}
for(i in 1:length(listofdf)){
df <- listofdf[[i]]
assign(as.character(websites$year[i]),df)
}
rm(website,df,i,confExtract)
#################################### Determine Gender ####################################
for (i in 1:length(listofdf) ){
df <- gender(as.character(listofdf[[i]]$First_name[-1,]),years = c(1960,2000),method = "ssa")
assign(paste0((websites$year[i]), '_Gender'),df)
}
GSAGender <-  data.frame(matrix(ncol = 2, nrow = 17971))
GSAGender[,1] <- rbind(data.frame(`2017_Gender`[-1,4]),data.frame(`2018_Gender`[-1,4]))
GSAGender[,2] <- rbind(as.data.frame(matrix(2017, ncol =1,nrow = dim(`2017_Gender`)[1]-1)),
as.data.frame(matrix(2018, ncol =1,nrow = dim(`2018_Gender`)[1]-1)))
#################################### plot results ####################################
g <- ggplot(GSAGender, aes(x = X1,y =
color = GSAGender$X2,
fill = GSAGender$X2))+
geom_bar()+
facet_wrap(GSAGender$X2)
g
View(GSAGender)
#################################### plot results ####################################
g <- ggplot(GSAGender, aes(x = X1,y =
color = GSAGender$X2,
fill = GSAGender$X2))+
geom_bar()+
facet_wrap(~GSAGender$X2)
g
#################################### plot results ####################################
g <- ggplot(GSAGender, aes(x = X1,y =
color = GSAGender$X2,
fill = GSAGender$X2))+
geom_bar()+
# facet_wrap(~GSAGender$X2)
g
#################################### plot results ####################################
g <- ggplot(GSAGender, aes(x = X1,y =
color = GSAGender$X2,
fill = GSAGender$X2))+
geom_bar()
# facet_wrap(~GSAGender$X2)
g
#################################### plot results ####################################
g <- ggplot(GSAGender, aes(x = X1,
color = GSAGender$X2,
fill = GSAGender$X2))+
geom_bar()+
facet_wrap(~GSAGender$X2)
g
#################################### plot results ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar(aes())+
facet_wrap(~GSAGender$X2)
g
#################################### plot results ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar(aes(y = (..count..)/sum(..count..)))+
facet_wrap(~GSAGender$X2)
g
#################################### plot results ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar(aes(y = (..count..)/sum(..count..)*100))+
facet_wrap(~GSAGender$X2)+
labs(x = 'Gender ratio at GSA annual meeting',
y = 'Percent of all authors',
title = '2017, 2018 comparison gender ratio of all authors')
g
#################################### plot results ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar(aes(y = (..count..)/sum(..count..)*100))+
facet_wrap(~GSAGender$X2)+
theme_classic()+
labs(x = 'Gender ratio at GSA annual meeting',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of all authors')
g
#################################### plot results ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar(aes(y = (..count..)/sum(..count..)*100))+
facet_wrap(~GSAGender$X2)+
theme_classic()+
labs(x = 'Gender ratio at GSA annual meeting',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of all authors',
caption = 'Data compiled and plotted by M. Morriss')
g
View(`2017_Gender`)
rm(GSAGender, 2017_Gender`, `2018_Gender`)
rm(GSAGender, `2017_Gender`,`2018_Gender`)
View(listofdf)
head(listofdf[[1]])
listofdf[[1]][listofdf[[1]]$p_Author]
listofdf[[1]]$First_name[listofdf[[1]]$p_Author]
listofdf[[1]]$p_Author
typeof(listofdf[[1]]$p_Author)
listofdf[[1]][listofdf[[1]]$p_Author]
listofdf[[1]][listofdf[[1]]$p_Author,]
for(i in 1:length(listofdf)) {
listofPre[[i]] <- listofdf[[i]][listofdf[[i]]$p_Author,]
}
listofPre <- list()
for(i in 1:length(listofdf)) {
listofPre[[i]] <- listofdf[[i]][listofdf[[i]]$p_Author,]
}
View(listofPre)
head(listofPre[[1]])
for (i in 1:length(listofdf) ){
df <- gender(as.character(listofPre[[i]]$First_name[-1,]),years = c(1960,2000),method = "ssa")
assign(paste0((websites$year[i]), '_Gender'),df)
}
GSAGender <-  data.frame(matrix(ncol = 2, nrow = 17971))
GSAGender[,1] <- rbind(data.frame(`2017_Gender`[-1,4]),data.frame(`2018_Gender`[-1,4]))
GSAGender[,2] <- rbind(as.data.frame(matrix(2017, ncol =1,nrow = dim(`2017_Gender`)[1]-1)),
as.data.frame(matrix(2018, ncol =1,nrow = dim(`2018_Gender`)[1]-1)))
length(listofPre)
dim(listofPre)
dim(listofPre[[1]])
dim(listofPre[[1:2]])
dim(listofPre[[1]])
dim(listofPre[[1]])+dim(listofPre[[2]])
(dim(listofPre[[1]])+dim(listofPre[[2]]))[1]
GSAGender <-  data.frame(matrix(ncol = 2, nrow = (dim(listofPre[[1]])+dim(listofPre[[2]]))[1]))
GSAGender[,1] <- rbind(data.frame(`2017_Gender`[-1,4]),data.frame(`2018_Gender`[-1,4]))
GSAGender[,2] <- rbind(as.data.frame(matrix(2017, ncol =1,nrow = dim(`2017_Gender`)[1]-1)),
as.data.frame(matrix(2018, ncol =1,nrow = dim(`2018_Gender`)[1]-1)))
GSAGender <-  data.frame(matrix(ncol = 2, nrow = 6862))
GSAGender[,1] <- rbind(data.frame(`2017_Gender`[-1,4]),data.frame(`2018_Gender`[-1,4]))
GSAGender[,2] <- rbind(as.data.frame(matrix(2017, ncol =1,nrow = dim(`2017_Gender`)[1]-1)),
as.data.frame(matrix(2018, ncol =1,nrow = dim(`2018_Gender`)[1]-1)))
View(`2017_Gender`)
View(GSAGender)
GSAGender[,1] <- rbind(data.frame(`2017_Gender`[-1,4]),data.frame(`2018_Gender`[-1,4]))
GSAGender <-  data.frame(matrix(ncol = 2, nrow = 6862))
GSAGender[,1] <- rbind(data.frame(`2017_Gender`[-1,4]),data.frame(`2018_Gender`[-1,4]))
GSAGender <-  data.frame(matrix(ncol = 2, nrow = 6860))
GSAGender[,1] <- rbind(data.frame(`2017_Gender`[-1,4]),data.frame(`2018_Gender`[-1,4]))
GSAGender[,2] <- rbind(as.data.frame(matrix(2017, ncol =1,nrow = dim(`2017_Gender`)[1]-1)),
as.data.frame(matrix(2018, ncol =1,nrow = dim(`2018_Gender`)[1]-1)))
#################################### plot presenting authors ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar(aes(y = (..count..)/sum(..count..)*100))+
facet_wrap(~GSAGender$X2)+
theme_classic()+
labs(x = 'Gender ratio at GSA annual meeting',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of all authors',
caption = 'Data compiled and plotted by M. Morriss')
g
#################################### plot presenting authors ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar(aes(y = (..count..)/sum(..count..)*100))+
facet_wrap(~GSAGender$X2)+
theme_classic()+
labs(x = 'Gender ratio at GSA annual meeting',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of Presenting authors',
caption = 'Data compiled and plotted by M. Morriss')
g
#################################### plot presenting authors ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar(aes(y = (..count..)/sum(..count..)*100))+
facet_wrap(~GSAGender$X2)+
theme_classic()+
labs(x = 'Gender',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of Presenting authors',
caption = 'Data compiled and plotted by M. Morriss')
g
#################################### plot results, all authors ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar(aes(y = (..count..)/sum(..count..)*100))+
facet_wrap(~GSAGender$X2)+
theme_classic()+
labs(x = 'Gender',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of all authors',
caption = 'Data compiled and plotted by M. Morriss')
g
#################################### Determine Gender ####################################
for (i in 1:length(listofdf) ){
df <- gender(as.character(listofdf[[i]]$First_name[-1,]),years = c(1960,2000),method = "ssa")
assign(paste0((websites$year[i]), '_Gender'),df)
}
GSAGender <-  data.frame(matrix(ncol = 2, nrow = 17971))
GSAGender[,1] <- rbind(data.frame(`2017_Gender`[-1,4]),data.frame(`2018_Gender`[-1,4]))
GSAGender[,2] <- rbind(as.data.frame(matrix(2017, ncol =1,nrow = dim(`2017_Gender`)[1]-1)),
as.data.frame(matrix(2018, ncol =1,nrow = dim(`2018_Gender`)[1]-1)))
#################################### plot results, all authors ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar(aes(y = (..count..)/sum(..count..)*100))+
facet_wrap(~GSAGender$X2)+
theme_classic()+
labs(x = 'Gender',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of all authors',
caption = 'Data compiled and plotted by M. Morriss')
g
#################################### re-run Gender analysis ####################################
#Re run gender analysis for only presenting authors
rm(GSAGender, `2017_Gender`,`2018_Gender`)
#copy list of Df to now only have the presnting authors
listofPre <- list()
for(i in 1:length(listofdf)) {
listofPre[[i]] <- listofdf[[i]][listofdf[[i]]$p_Author,]
}
for (i in 1:length(listofdf) ){
df <- gender(as.character(listofPre[[i]]$First_name[-1,]),years = c(1960,2000),method = "ssa")
assign(paste0((websites$year[i]), '_Gender'),df)
}
rm(i, df)
GSAGenderP <-  data.frame(matrix(ncol = 2, nrow = 6860))
GSAGenderP[,1] <- rbind(data.frame(`2017_Gender`[-1,4]),data.frame(`2018_Gender`[-1,4]))
GSAGenderP[,2] <- rbind(as.data.frame(matrix(2017, ncol =1,nrow = dim(`2017_Gender`)[1]-1)),
as.data.frame(matrix(2018, ncol =1,nrow = dim(`2018_Gender`)[1]-1)))
#################################### plot presenting authors ####################################
g <- ggplot(GSAGenderP, aes(x = X1))+
geom_bar(aes(y = (..count..)/sum(..count..)*100))+
facet_wrap(~GSAGenderP$X2)+
theme_classic()+
labs(x = 'Gender',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of Presenting authors',
caption = 'Data compiled and plotted by M. Morriss')
g
#################################### plot presenting authors ####################################
g <- ggplot(GSAGenderP, aes(x = X1))+
geom_bar())+
facet_wrap(~GSAGenderP$X2)+
theme_classic()+
labs(x = 'Gender',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of Presenting authors',
caption = 'Data compiled and plotted by M. Morriss')
g
#################################### plot presenting authors ####################################
g <- ggplot(GSAGenderP, aes(x = X1))+
geom_bar()+
facet_wrap(~GSAGenderP$X2)+
theme_classic()+
labs(x = 'Gender',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of Presenting authors',
caption = 'Data compiled and plotted by M. Morriss')
g
#################################### plot results, all authors ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar()+
facet_wrap(~GSAGender$X2)+
theme_classic()+
labs(x = 'Gender',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of all authors',
caption = 'Data compiled and plotted by M. Morriss')
g
#################################### Determine Gender ####################################
for (i in 1:length(listofdf) ){
df <- gender(as.character(listofdf[[i]]$First_name[-1,]),years = c(1960,2000),method = "ssa")
assign(paste0((websites$year[i]), '_Gender'),df)
}
GSAGender <-  data.frame(matrix(ncol = 2, nrow = 17971))
GSAGender[,1] <- rbind(data.frame(`2017_Gender`[-1,4]),data.frame(`2018_Gender`[-1,4]))
GSAGender[,2] <- rbind(as.data.frame(matrix(2017, ncol =1,nrow = dim(`2017_Gender`)[1]-1)),
as.data.frame(matrix(2018, ncol =1,nrow = dim(`2018_Gender`)[1]-1)))
#################################### plot results, all authors ####################################
g <- ggplot(GSAGender, aes(x = X1))+
geom_bar()+
facet_wrap(~GSAGender$X2)+
theme_classic()+
labs(x = 'Gender',
y = 'Percent of all authors',
title = '2017, 2018 GSA annual meeting, gender ratio of all authors',
caption = 'Data compiled and plotted by M. Morriss')
g
