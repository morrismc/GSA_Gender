plot(1,1)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(length)
sizeOf
help("size")
help("nrow")
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(plot)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
a
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
help(sum)
a
a <- 1
a <- a + 1
a
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
a = rep(0, 3)
a
a = rep(0, 366)
a[1,1]
a[1,]
typeof(a)
a[]
a[1]
a[2]
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
a <- [1:5,1]
a <- (1:5,1)
a <- (1:5)
a
a <- (1:5,1:5)
a <- (1:5)
a <- (1:366)
a
dim(a)
typeOf(a)
typeof(a)
help(cumsum)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
Homocides
url <- 'https://data.cityofchicago.org/api/views/k9xv-yxzs/rows.csv?accessType=DOWNLOAD'
x <- getURL(url)
Homocides <- read.csv(textConnection(x))
Homocides <- read.csv(textConnection(x))
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
#################################### Process data ####################################
# In this section, I want to convert from the date to Day of the Year
library(lubridate)
DayofYear <- data.frame(Day = rep(NA,nrow(Homocides)),
ID = rep(NA,nrow(Homocides)))
DayofYear[,1] <- yday(mdy_hms(Homocides$Date))
DayofYear[,2] <- Homocides$ID
Homocides <- merge(Homocides, DayofYear, by = c("ID"))
runApp('Documents/GitHub/Chicago_shooting/Homocides')
vector(mode = 'string',length = 10)
vector(mode = 'any',length = 10)
vector(length = 10)
vector(mode = "list",length = 10)
#################################### SECTION TITLE ####################################
D <- data.frame(color = rep(NA,nrow(Homocides)))
for (r in 1:nrow(Homocides)) {
if(Homocides[r,3] == 'true'){
D[r,1] <- 'blue'
}
else {
D[r,1] <- 'red'
}
}
}
#################################### SECTION TITLE ####################################
D <- data.frame(color = rep(NA,nrow(Homocides)))
for (r in 1:nrow(Homocides)) {
if(Homocides[r,3] == 'true'){
D[r,1] <- 'blue'
}
else {
D[r,1] <- 'red'
}
}
View(D)
#################################### SECTION TITLE ####################################
D <- data.frame(color = rep(NA,nrow(Homocides)),
ID = rep(NA,nrow(Homocides)))
for (r in 1:nrow(Homocides)) {
if(Homocides[r,3] == 'true'){
D[r,1] <- 'blue'
D[r,2] <- Homocides[r,1]
}
else {
D[r,1] <- 'red'
D[r,2] <- Homocides[r,1]
}
}
View(D)
Homocides <- merge(Homocides, D, by = c("ID"))
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
rm(DayofYear,D)
rm(DayofYear,D,Homocides_2018,m,a)
rm(DayofYear,D,Homocides_2018,m,a)
help(addLegend)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(Homocides)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
View(D)
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a <- a + 1
}
}
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
input
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
Homocides_flt <- filter(Homocides,Year 2017)
Homocides_flt <- filter(Homocides,Year 2017)
Homocides_flt <- filter(Homocides,Year ==2017)
D <- data.frame(Day = rep(NA,365),
Homocide_cnt = rep(NA,365))
# Zip through all of the homocides and then calculate the number of
# homocides per day.
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
View(D)
View(Homocides_flt)
Homocides_flt[r,23]
Homocides_flt[order(Day),]
Homocides_flt[order(Day),]
Homocides_flt[order(Day)=]
Homocides_flt[order(Day)]
Homocides_flt[order(Homocides_flt$Day,)]
example(order)
help(order)
Homocides_flt[order(day),]
Homocides_flt[order(Day),]
Data <- Homocides_flt[order(Day),]
Data <- Homocides_flt[order(Homocides_flt$Day),]
View(Data)
Homocides_flt <- Homocides_flt[order(Homocides_flt$Day),]
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[r,2] <- D[r,2] + 1
}
else {
a<- a + 1
}
}
View(D)
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
a<- a + 1
}
}
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
D[a,1] <- a
a<- a + 1
}
}
r = 1
a = 1
if(Homocides_flt[r,23] == a)
{}
Homocides_flt[r,23] == a
D[a,2]
D[a,2] + 1
D <- data.frame(Day = rep(NA,365),
Homocide_cnt = rep(0,365))
a = 1
for (r in 1:nrow(Homocides_flt)){
if(Homocides_flt[r,23] == a){
D[a,2] <- D[a,2] + 1
}
else {
D[a,1] <- a
a<- a + 1
}
}
plot(D$Day,D$Homocide_cnt)
cumsum(D$Homocide_cnt)
plot(D$Day,cumsum(D$Homocide_cnt))
D$Homocide_cnt = cumsum(D$Homocide_cnt)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
View(D)
runApp('Documents/GitHub/Chicago_shooting/Homocides')
runApp('Documents/GitHub/Chicago_shooting/Homocides')
library(`agTrend-master`)
library(`agTrend`)
library(`agTrend-master`)
library(agTrend)
library(bsts)
help(bsts)
## Example 8: Non-Gaussian data
## Poisson counts of shark attacks in Florida.
data(shark)
logshark <- log1p(shark$Attacks)
ss.level <- AddLocalLevel(list(), y = logshark)
model <- bsts(shark$Attacks, ss.level, niter = 500,
ping = 250, family = "poisson", seed = 8675309)
plot(model)
plot(model,'components')
# Poisson data can have an 'exposure' as the second column of a
## two-column matrix.
model <- bsts(cbind(shark$Attacks, shark$Population / 1000),
state.specification = ss.level, niter = 500,
family = "poisson", ping = 250, seed = 8675309)
plot(model)
MakePlots <- function(model, ask = TRUE) {
## Make all the plots callable by plot.bsts.
opar <- par(ask = ask)
on.exit(par(opar))
plot.types <- c("state", "components", "residuals",
"prediction.errors", "forecast.distribution")
for (plot.type in plot.types) {
plot(model, plot.type)
}
if (model$has.regression) {
regression.plot.types <- c("coefficients", "predictors", "size")
for (plot.type in regression.plot.types) {
plot(model, plot.type)
}
}
}
MakePlots(model)
trend <- cumsum(rnorm(number.of.time.points, 0, sigma.level))
predictors <- matrix(rnorm(total.sample.size * 2), ncol = 2)
colnames(predictors) <- c("X1", "X2")
coefficients <- c(-10, 10)
regression <- as.numeric(predictors %*% coefficients)
y.hat <- rep(trend, sample.size.per.time.point) + regression
y <- rnorm(length(y.hat), y.hat, sigma.obs)
data(iclaims)
ss <- AddLocalLinearTrend(list(), initial.claims$iclaimsNSA)
ss <- AddSeasonal(ss, initial.claims$iclaimsNSA, nseasons = 52)
model <- bsts(iclaimsNSA ~ ., state.specification = ss, data =
initial.claims, niter = 1000)
plot(model)
plot(model, "components")
plot(model, "coefficients")
plot(model, "predictors")
plot(model)
library(BLR)
help(BLR)
install.packages("bayesplot")
install.packages("rstanarm")
library("bayesplot")
library("rstanarm")
library("ggplot2")
fit <- stan_glm(mpg ~ ., data = mtcars)
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("cyl", "drat", "am", "wt"),
prob = 0.8) + plot_title
color_scheme_set("red")
ppc_dens_overlay(y = fit$y,
yrep = posterior_predict(fit, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = fit$y,
yrep = posterior_predict(fit, draws = 150))
fit <- stan_glm(mpg ~ wt, data = mtcars)
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("cyl", "drat", "am", "wt"),
prob = 0.8) + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("wt"),
prob = 0.8) + plot_title
color_scheme_set("red")
ppc_dens_overlay(y = fit$y,
yrep = posterior_predict(fit, draws = 50))
#################################### Download names ####################################
website %>%
html_nodes(xpath = '//*[@class = "author"]') %>%
html_text()
#################################### Load tools####################################
rm(list = ls())
library(data.table)
library(XML)
library(rvest)
website <- read_html('https://gsa.confex.com/gsa/2018AM/webprogram/allauthors.html')
#################################### Download names ####################################
website %>%
html_nodes(xpath = '//*[@class = "author"]') %>%
html_text()
#################################### Download names ####################################
nodes <- website %>%
html_nodes(xpath = '//*[@class = "author"]') %>%
html_text()
length(nodes)
strsplit(nodes)
top(nodes)
nodes[1:10]
help(sub)
sub('\\\r\n\t\t\r\n\t\t\t','',nodes)
#################################### Deal with Data ####################################
nodes <- sub('\\\r\n\t\t\r\n\t\t\t','',nodes)
nodes
nodes <- sub('\\.\r\n\t\t\r\n\t','',nodes)
nodes
#################################### Number of registrants/presenters ####################################
setwd('/Users/matthew/Documents/GitHub/GSA_Gender')
GSA_Names <- read.csv('GSA_names.csv')
library(tidyverse)
library(gender)
#################################### Presenting v non-presenting ####################################
GSA_Names %>%
count(Year, is_presenting) %>%
ggplot(aes(Year, n, color = is_presenting))+
geom_line()
#################################### Create Gsa presenting ####################################
GSA_Names$First_name <- as.character(GSA_Names$First_name)
# Identify possible gender for GSA Names
# GSA_NamesS <- GSA_Names[1:1000,]
GSA_Names %>%
# rowwise() %>%
do(results = gender(.$First_name, years = c(1960, 2000),method = "ssa")) %>%
do(bind_rows(.$results)) -> GSA_Gender
GSA_Gender %>%
select(name, gender)%>%
unique()-> GSA_Gender
names(GSA_Gender) <- c('First_name','gender')
GSA_Names %>%
left_join(GSA_Gender, by = c('First_name')) -> GSA_Names2
GSA_Names2 <- GSA_Names2[complete.cases(GSA_Names2),]
GSA_NamesP <- GSA_Names2[GSA_Names2$is_presenting,]
#################################### Plot gender over year ####################################
GSA_Names2 %>%
group_by(Year) %>%
count(gender) %>%
ggplot(aes(x = Year, y = n, color = gender))+
geom_line()+
theme_light()+
labs(x = 'Year',y = 'Count', color = 'Gender',title = 'GSA National Meeting gender split of authors')
#################################### Proportion Female ####################################
GSA_Names2 %>%
group_by(Year,gender,is_presenting) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
ggplot(aes(x = Year, y = freq*100, color = gender))+
geom_line()+
labs(y = '% of Total attendees',title = 'GSA National Meeting gender split of authors')+
ylim(0,100)+
theme_set(theme_light(base_size = 14))
#################################### Plot gender over year ####################################
GSA_Names2 %>%
group_by(Year) %>%
count(gender) %>%
ggplot(aes(x = Year, y = n, color = gender))+
geom_line()+
theme_light()+
labs(x = 'Year',y = 'Count', color = 'Gender',title = 'GSA National Meeting gender split of authors')
#################################### Plot gender over year ####################################
GSA_Names2 %>%
group_by(Year) %>%
count(gender) %>%
ggplot(aes(x = Year, y = n, color = gender))+
geom_line()+
theme_set(theme_light(base_size = 14))+
labs(x = 'Year',y = 'Count', color = 'Gender',title = 'GSA National Meeting gender split of authors')
#################################### Proportion female presenting authors ####################################
GSA_NamesP %>%
group_by(Year,gender) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
ggplot(aes(x = Year, y = freq*100, color = gender))+
geom_line()+
labs(y = '% of Total Presenting authors',title = 'GSA National Meeting gender split of Presenting authors')+
ylim(0,100)+
theme_set(theme_light(base_size = 14))
#################################### Proportion female presenting authors ####################################
GSA_NamesP %>%
group_by(Year,gender) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
ggplot(aes(x = Year, y = freq*100, color = gender))+
geom_line(aes(size = 1))+
labs(y = '% of Total Presenting authors',title = 'GSA National Meeting gender split of Presenting authors')+
ylim(0,100)+
theme_set(theme_light(base_size = 14))
#################################### Proportion female presenting authors ####################################
GSA_NamesP %>%
group_by(Year,gender) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
ggplot(aes(x = Year, y = freq*100, color = gender))+
geom_line(aes(size = 0.5))+
labs(y = '% of Total Presenting authors',title = 'GSA National Meeting gender split of Presenting authors')+
ylim(0,100)+
theme_set(theme_light(base_size = 14))
#################################### Proportion female presenting authors ####################################
GSA_NamesP %>%
group_by(Year,gender) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
ggplot(aes(x = Year, y = freq*100, color = gender))+
geom_line(aes(size = 0.5))+
labs(y = '% of Total Presenting authors',title = 'GSA National Meeting gender split of Presenting authors')+
ylim(0,100)+
theme_set(theme_light(base_size = 14))
#################################### Proportion female presenting authors ####################################
GSA_NamesP %>%
group_by(Year,gender) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
ggplot(aes(x = Year, y = freq*100, color = gender))+
geom_line(aes(size = 1.5))+
labs(y = '% of Total Presenting authors',title = 'GSA National Meeting gender split of Presenting authors')+
ylim(0,100)+
theme_set(theme_light(base_size = 14))
#################################### Proportion female presenting authors ####################################
GSA_NamesP %>%
group_by(Year,gender) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
ggplot(aes(x = Year, y = freq*100, color = gender))+
geom_line()+
labs(y = '% of Total Presenting authors',title = 'GSA National Meeting gender split of Presenting authors')+
ylim(0,100)+
theme_set(theme_light(base_size = 14))
#################################### Proportion Female ####################################
GSA_Names2 %>%
group_by(Year,gender,is_presenting) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
ggplot(aes(x = Year, y = freq*100, color = gender))+
geom_line()+
labs(y = '% of Total attendees',title = 'GSA National Meeting gender split of authors')+
ylim(0,100)+
theme_set(theme_light(base_size = 14))
View(GSA_Names)
View(GSA_NamesP)
View(GSA_Names)
View(GSA_Names2)
#################################### Proportion Female ####################################
GSA_Names2 %>%
group_by(Year,gender,is_presenting) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
ggplot(aes(x = Year, y = freq*100, color = gender))+
geom_line()+
labs(y = '% of Total attendees',title = 'GSA National Meeting gender split of authors')+
ylim(0,100)+
theme_set(theme_light(base_size = 14))
#################################### Proportion Female ####################################
GSA_Names2 %>%
group_by(Year,gender) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
ggplot(aes(x = Year, y = freq*100, color = gender))+
geom_line()+
labs(y = '% of Total attendees',title = 'GSA National Meeting gender split of authors')+
ylim(0,100)+
theme_set(theme_light(base_size = 14))
